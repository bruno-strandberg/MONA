===== Asimov sensitivity analysis for different PID binning schemes =====

This folder contains ROOT macros used in the analysis of "multi PID bins" or using more than 2 bins in the PID 
variable q to increase the sensitivity to the NMO signature in the ORCA detector. To do this analysis the scripts
calculate the sensitivity in different circumstances for our analysis parameters. 
Examples of these parameters include: different binning schemes in the PID variable, number of bins in the E and 
cos-th dimension, energy cuts in the fitted and calculated area when computing the sensitivity.

===== Contents =====
This folder contains the following type of scripts, ordered by naming:

They all start with `AsimovFit` and the part that follows tells the user what kind of scheme is used:
 -`NO` and `IO` refer to the assumed ordering in nature when generating the expectation value "data" to fit on
 -`XBins` refers to the number of bins used in the script in the PID variable. No mention of this means the 
  scripts uses the default 2 bins, shower and track. So far only two are used and necessary: `3Bins` and `NBins`.
  NBins can be any multiple of 5. In general 5 and 10 are used, since at 10 PID bins the MC statistics become
  quite low and unreliable. The value is set at the start of the macro.
 -`Th23Range` refers to wether the scripts loops over the `\Theta_{23}` true value from 40 to 50 in steps of 1 and
  saves the output. If this not in the title, the script takes the PDG central value for `\Theta_{23}`.
  Please note that the `Th23Range` scripts all output their values into `./output/csv/`

Examples:
 -`AsimovFitNO.C`: This script assumes NO for the expectation values, uses the default 2 bins in PID and does NOT run 
  over the `\Theta_{23}` range, it uses the DPG central values.
 -`AsimovFitNBinsIOTh23Range.C`: This file assumes IO ordering for the expectation values as data and uses NBins in
  the PID variable, which defaults to 10 bins. It also walks over the range for `\Theta_{23}` from 40 to 50.

===== Combining output csv files =====
The output files from the `Th23Range` files are csv or csv files containing csv data. However this will have to be
combined into one file that is read by the plotting python scripts. This can be done by running the following 
terminal command: 
`$ paste -d "" AsimovFitNO.csv AsimovFitIO.csv > AsimovFit.csv`
This vertically merges the csv files into a new csv file. When running the python scripts, they read a csv with pandas
and use its powerful plotting functionality.
I realize this manual step is not ideal, this is the first attempt to make such an analysis pipeline.

===== Example of running code to generate one plot =====
To create the sensitivity curve for the "normal" case, of two PID bins with no cuts and no special treatments: 
(NB: running the ROOT macros can take up to O(30 minutes))

`$ cd $NMH_DIR/macros/asimov_fit`
`$ root AsimovFitNOTh23Range.C+`
`$ root AsimovFitIOTh23Range.C+`
`$ cd ./output/csv/`
`$ paste -d "" AsimovFitNOTh23Range.csv AsimovFitIOTh23Range.csv > AsimovFitTh23Range.csv`
`$ cd $NMH_DIR/macros/asimov_fit`
`$ python plot_th23_range.py`

The plot will now be written at `./output/plots/`
Similarly for all other combinations of ROOT macros, output csv, and python plotting scripts. 

===== Issues, assumptions and gotchas =====
When running these scripts, make sure that both Asimov scripts have the same:
 Read and write folders, detector responses, effective masses, E-ct-by-binnings, fit-binnings, cuts.
 Also the scripts denoted by XO mean both NO and IO.
When running the python plot scripts make sure:
 Read and write folders are set properly (output/csv, output/plots), they read the proper columns and of course that
 the titles, labels and legend are what you want them to be.

===== Plots from collaboration meeting 2019-02 =====
To recreate the plots from the 2019-02 collaboration meeting, found at 
`https://indico.cern.ch/event/780512/contributions/3249196/attachments/1804080/2943637/collaboration_meeting_sensitivity_20190228.pdf`
run the following code in accordance to the section above:

 -Standard 2 bin sensitivity curve: AsimovFitXOTh23Range.C and plot_th23_range.py
 -Standard 2 bin sensitivity curve from paramNMH: plot_th23_range_paramNMH.py, the data is committed to the repository
  for simplicity.
 -Compare 2 and 3 bin sensitivity curve: The python code generates this plot for multiple different scenarios, so you
  need to run the base ROOT macro with different scenarios to get it to run immediately. This is a hassle, so if you
  only want the standard result run: AsimovFitXOTh23Range.C, AsimovFit3BinsXOTh23Range.C and 
  plot_th23_range_compare_binnings.py
  If you want to generate all plots: run these 4 scripts with "fit using Expected errors", "Fit using Poisson errors",
  "Use 24 Ebins instead of 40 for the fit with Expected Errors", "Use 24 Ebins for the fit with Poisson Errors".
  Use the following settings: EBins = 40 or 24, DataError(RooAbsData::Poisson) or DataError(RooAbsData::Expected)
 -Sensitivity (E, ct) plots are generated automatically by the AsimovFit*Th23Range scripts, and are saved into 
  `output/root`
 -Sensitivity with multiple bins and energy cuts: run AsimovFitXO.C, AsimovFit3BinsXO.C, AsimovFitNBinsXO.C with 5 
  and 10 bins and energy cuts (fitEMin,fitEMax) = (2,80), (3,60) and (5,15)
 -Relative uncertainty plots are generated by the scripts in `$NMH_DIR/asymmetry/` called 
  `PlotRelativeErrorNEvents*.C`
 -Sensitivity plot for 2 and 3 bins with different q-edge values (0.2, 0.3, 0.4) run AsimovFitXO.C, AsimovFit3BinsXO.C
  with options (fitEMin,fitEMax) = (2,80), (3,50), (3,30) and (3,20) and for the q value change upper limit of the
  first bin between 0.2, 0.3 and 0.4. Write the output numbers into `./output/csv/QRange.csv` in accordance to the
  way the data is read-in by pandas in plot_qrange.py. Run plot_qrange.py to generate the plot. Apologies for this 
  part.
