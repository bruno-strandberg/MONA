#ifndef NuXsec_h
#define NuXsec_h

#include "TGraph.h"
#include "TH2.h"
#include<map>

using namespace std;

/** A class that provides a neutrino cross-section calculator. 
 
   The class can be used as follows. After init, the function `GetXsec(nu-flavor, is-cc, is-nb, energy)` can be used to get the neutrino-interaction cross-section in sea-water (oxygen+proton).
 
   Additionally, the class has a function `GetBYfrac`. This function can be used to distribute interacted events to bjorken-y bins. Given a neutrino energy and a bjorken-y value, it returns the fraction of events expected in the bjorken-y bin at that energy. For example, consider a case when there are N interacted events for an energy vs costheta bin. One may wish to include the bjorken-y dimension and distribute the N events to 4 bjorken-y bins. Then, the function `GetByfrac(nu-flavor, is-cc, isnb, E, by)` returns the fraction of events in the bin corresponding to the bjorken-y value. The bjorken-y distributions are normalised such that \f$ \sum_{by bins} = 1\f$ for a given energy. The constructor can be used without specifying bjorken-y bins, in this case `GetXsec` will work without issues, `GetBYfrac` will throw an error.

   NB! For the normalisation to be correct, the number of bjorken-y bins given to the class has to match the number of bjorken-y bins the interacted events are being distributed to! The distributions are based on MC data from gSeaGen and thus have some limitations in accuracy due to binning on the energy axis.
   
   The class uses a root file in specific format that stores TGraphs with total neutrino cross-sections for CC and NC interactions on proton and oxygen. The cross-section data is extracted from GENIE by `MONA/apps/xsec_extractor` application.

   The E vs bjorken-y distributions are also read from a root file that is generated by the apps `MONA/apps/bjorkeny-dists`, based on gSeaGen MC data.

   Example usage:
   \code{.cpp}
   Double_t flux = 1E50;                                     \\ assume 1E50 events per 1/m^2 in some time
   NuXsec xsec(4);                                           \\ cross section calculator instance, 4 by-bins
   Double_t Nint = flux * xsec.GetXsec(0, 1, 0, 10);         \\ number of interacted events elec-CC-nu events
   Double_t Nfrac = Nint * xsec.GetBYdist(0, 1, 0, 10, 0.4)  \\ fraction of events in in by bin [0.25,0.5)
   \endcode

 */

class NuXsec {

 public:
  NuXsec(UInt_t bybins        = 0, 
	 TString xsecfile     = (TString)getenv("MONADIR") + "/data/xsec_data/xsec_gSeaGen_v5r1.root", 
	 TString by_dist_file = (TString)getenv("MONADIR") + "/data/xsec_data/by_dists_gSeaGen_v5r1.root");
  ~NuXsec();

  void     SelectInteraction(Int_t nu_flavor, Bool_t is_cc, Bool_t is_nubar);
  Double_t GetXsec(Double_t E);
  Double_t GetBYfrac(Double_t E, Double_t by);
  Double_t GetXsec(Int_t nu_flavor, Bool_t is_cc, Bool_t is_nubar, Double_t E);
  Double_t GetBYfrac(Int_t nu_flavor, Bool_t is_cc, Bool_t is_nubar, Double_t E, Double_t by);

 private:
  void     InitMaps(TString xsecfile, TString byfile, UInt_t bybins);
  TString  CreateString(Int_t nu_flavor, Bool_t is_cc, Bool_t is_nubar);

  map < Int_t, TString > fNu_flavs  = { {0, "e"}, {1, "mu"}, {2, "tau"} }; //!< map with e, mu, tau
  map < Int_t, TString > fInt_types = { {0, "_nc"}, {1, "_cc"} };          //!< map with nc, cc
  map < Int_t, TString > fP_types   = { {0, ""}, {1, "_bar"} };            //!< map with "", "bar"

  map < TString, vector<TGraph*> > fGraphs; //!< map with graphs from file
  map < TString, TH2D* > fByHists;          //!< map with bjorken-y histograms

  Bool_t  fGraphsSet; //!< flag to indicate that graph pointers to the selected interaction are set
  Bool_t  fByBinsSet; //!< flag to indicate that bjorken-y bins were specified at construction
  TGraph *f_g_H1;     //!< pointer to a graph with H1 xsec for the selected interaction
  TGraph *f_g_O16;    //!< pointer to a graph with O16 xsec for the selected interaction
  TH2D   *f_h_by;     //!< pointer to a hist with E vs bjorken-y distribution for selected interaciton 
  Double_t fEmin;     //!< minimum of the covered energy range of the input xsec files
  Double_t fEmax;     //!< maximum of the covered energy range of the input xsec files
  TString  fXsecFile; //!< file where xsec data is read from
  TString  fByFile;   //!< file where bjorken-y distributions are read from

};

#endif
