#ifndef NuXsec_h
#define NuXsec_h

#include "TGraph.h"
#include "TH2.h"
#include<map>

using namespace std;

/** A class that provides a neutrino cross-section calculator. 
 
   The class can be used as follows. After init, select the neutrino interaction with the public function `SelectInteraction`. Then use the function `GetXsec` to get the cross-section depending on neutrino energy.
 
   Additionally, the class has a function `GetBYfrac`. This function can be used to distribute interacted events to bjorken-y bins. Given a neutrino energy and a bjorken-y value, it returns the fraction of events expected in the bjorken-y bin at that energy. For example, consider a case when there are N interacted events for an energy vs costheta bin. One may wish to include the bjorken-y dimension and distribute the N events to 4 bjorken-y bins. Then, the function `GetByfrac(E, by)` returns the fraction of events in the bin corresponding to the bjorken-y value. The bjorken-y distributions are normalised such that \f$ \sum_{by bins} = 1\f$ for a given energy. The constructor can be used without specifying bjorken-y bins, in this case `GetXsec` will work without issues, `GetBYfrac` will throw an error.

   NB! For the normalisation to be correct, the number of bjorken-y bins given to the class has to match the number of bjorken-y bins the interacted events are being distributed to!
   
   The class uses a root file in specific format that stores TGraphs with total neutrino cross-sections for CC and NC interactions on proton and oxygen. The cross-section data was extracted from GENIE by M. Jongen.

   The E vs bjorken-y distributions are also read from a root file that is generated by the scripts NMHDIR/bjorkeny-dists.

   Example usage:
   ```
   Double_t flux = 1E50;                             \\ assume 1E50 events per 1/m^2 in some time
   NuXsec xsec(4);                                   \\ cross section calculator instance, 4 by-bins
   xsec.SelectInteraction(0, 1, 0);                  \\ select electron CC interaction
   Double_t Nint = flux * xsec.GetXsec(10);          \\ number of interacted events
   Double_t Nfrac = Nint * xsec.GetBYdist(10, 0.4)   \\ fraction of events in in by bin [0.25,0.5)
   ```

 */

class NuXsec {

 public:
  NuXsec(Int_t bybins = -1, TString xsecfile="", TString by_dist_file="");
  ~NuXsec();

  void     SelectInteraction(Int_t nu_flavor, Bool_t is_cc, Bool_t is_nubar);
  Double_t GetXsec(Double_t E);
  Double_t GetBYfrac(Double_t E, Double_t by);

 private:
  void     InitMaps(TString xsecfile, TString byfile, Int_t bybins);
  TString  CreateString(Int_t nu_flavor, Bool_t is_cc, Bool_t is_nubar);

  map < Int_t, TString > fNu_flavs  = { {0, "e"}, {1, "mu"}, {2, "tau"} }; //!< map with e, mu, tau
  map < Int_t, TString > fInt_types = { {0, "_nc"}, {1, "_cc"} };          //!< map with nc, cc
  map < Int_t, TString > fP_types   = { {0, ""}, {1, "_bar"} };            //!< map with "", "bar"

  map < TString, vector<TGraph*> > fGraphs; //!< map with graphs from file
  map < TString, TH2D* > fByHists;          //!< map with bjorken-y histograms

  Bool_t  fGraphsSet; //!< flag to indicate that graph pointers to the selected interaction are set
  Bool_t  fByBinsSet; //!< flag to indicate that bjorken-y bins were specified at construction
  TGraph *f_g_H1;     //!< pointer to a graph with H1 xsec for the selected interaction
  TGraph *f_g_O16;    //!< pointer to a graph with O16 xsec for the selected interaction
  TH2D   *f_h_by;     //!< pointer to a hist with E vs bjorken-y distribution for selected interaciton 

};

#endif
